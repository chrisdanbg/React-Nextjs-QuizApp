{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kristiyan\\\\Desktop\\\\React-Nextjs-QuizApp\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport quizQuestions from '../api/quizQuestions';\nimport { Component } from \"react\";\nimport Quiz from '../components/quiz';\nimport Result from '../components/result';\nimport { loadFirebase } from '../components/firebase';\nimport { firestore } from 'firebase';\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    let firebase = loadFirebase();\n    console.log(db.collection('cities'));\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  setUserAnswer(answer) {\n    this.setState(state => ({\n      answersCount: _objectSpread({}, state.answersCount, {\n        [answer]: (state.answersCount[answer] || 0) + 1\n      }),\n      answer: answer\n    }));\n    console.log(answer);\n    console.log(this.state.answersCount);\n  }\n\n  setNextQestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answerCountKeys = Object.keys(answersCount);\n    const answerCountValues = answerCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answerCountValues);\n    return answerCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  renderQuiz() {\n    return __jsx(Quiz, {\n      answer: this.state.answer,\n      answerOptions: this.state.answerOptions,\n      questionId: this.state.questionId,\n      question: this.state.question,\n      questionTotal: quizQuestions.length,\n      onAnswerSelected: this.handleAnswerSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    });\n  }\n\n  renderResult() {\n    return __jsx(Result, {\n      quizResult: this.state.result,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"App-Header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"React Quiz\")), this.state.result ? this.renderResult() : this.renderQuiz());\n  }\n\n}\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Kristiyan/Desktop/React-Nextjs-QuizApp/pages/index.js"],"names":["quizQuestions","Component","Quiz","Result","loadFirebase","firestore","Index","constructor","props","state","counter","questionId","question","answerOptions","answer","answersCount","result","handleAnswerSelected","bind","firebase","console","log","db","collection","componentDidMount","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","setUserAnswer","setNextQestion","setResults","getResults","answerCountKeys","Object","keys","answerCountValues","key","maxAnswerCount","max","apply","filter","event","currentTarget","value","setTimeout","renderQuiz","renderResult","render"],"mappings":"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","sourcesContent":["import quizQuestions from '../api/quizQuestions'\r\n\r\nimport { Component } from \"react\";\r\nimport Quiz from '../components/quiz';\r\nimport Result from '../components/result';\r\nimport { loadFirebase } from '../components/firebase';\r\nimport { firestore } from 'firebase';\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            counter: 0,\r\n            questionId: 1,\r\n            question: '',\r\n            answerOptions: [],\r\n            answer: '',\r\n            answersCount: {},\r\n            result: ''\r\n        };\r\n\r\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n\r\n        let firebase = loadFirebase();\r\n\r\n        console.log(db.collection('cities'))\r\n    }\r\n\r\n    componentDidMount() {\r\n        const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\r\n        \r\n        this.setState({\r\n            question: quizQuestions[0].question,\r\n            answerOptions: shuffledAnswerOptions[0]\r\n        })\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    setUserAnswer(answer) {\r\n        this.setState((state) => ({\r\n            answersCount: {\r\n                ...state.answersCount,\r\n                [answer]:  (state.answersCount[answer] || 0) + 1 \r\n            },\r\n            answer: answer\r\n        }))\r\n        console.log(answer)\r\n        console.log(this.state.answersCount);\r\n    }\r\n\r\n    setNextQestion() {\r\n        const counter = this.state.counter + 1;\r\n        const questionId = this.state.questionId + 1;\r\n\r\n        this.setState({\r\n            counter: counter,\r\n            questionId: questionId,\r\n            question: quizQuestions[counter].question,\r\n            answerOptions: quizQuestions[counter].answers,\r\n            answer: ''\r\n        });\r\n    }\r\n\r\n    setResults(result) {\r\n        if (result.length === 1) {\r\n            this.setState({result: result[0]});\r\n        } else {\r\n            this.setState({result: 'Undetermined'});\r\n        }\r\n    }\r\n\r\n    getResults() {\r\n        const answersCount = this.state.answersCount;\r\n        const answerCountKeys = Object.keys(answersCount)\r\n        const answerCountValues = answerCountKeys.map((key) => answersCount[key]);\r\n\r\n        const maxAnswerCount = Math.max.apply(null, answerCountValues);\r\n\r\n        return answerCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\r\n    }\r\n\r\n    handleAnswerSelected(event) {\r\n        this.setUserAnswer(event.currentTarget.value);\r\n        if (this.state.questionId < quizQuestions.length) {\r\n            setTimeout(() => this.setNextQestion(), 300);\r\n        } else {\r\n            setTimeout(() => this.setResults(this.getResults()), 300)\r\n        }\r\n    }\r\n\r\n    renderQuiz() {\r\n        return (\r\n            <Quiz\r\n                answer={this.state.answer}\r\n                answerOptions={this.state.answerOptions}\r\n                questionId={this.state.questionId}\r\n                question={this.state.question}\r\n                questionTotal={quizQuestions.length}\r\n                onAnswerSelected={this.handleAnswerSelected}\r\n            />\r\n        )\r\n    }\r\n\r\n    renderResult() {\r\n        return(\r\n            <Result quizResult={this.state.result}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n       return( \r\n            <div className=\"App\">\r\n                <div className=\"App-Header\">\r\n                    <h2>React Quiz</h2>\r\n                </div>\r\n               {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}