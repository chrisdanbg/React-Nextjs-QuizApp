{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Kristiyan\\\\Desktop\\\\React-Nextjs-QuizApp\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Component } from \"react\";\nimport Quiz from '../components/quiz';\nimport Result from '../components/result';\nimport Login from '../components/login';\nimport firebase from '../components/firebase';\nvar quizQuestions = [];\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var getData = firebase.firestore().collection('questions').get().then(function (snapshot) {\n        snapshot.forEach(function (doc) {\n          quizQuestions.push(doc.data());\n        });\n        var shuffledAnswerOptions = quizQuestions.map(function (question) {\n          return _this2.shuffleArray(question.answers);\n        });\n\n        _this2.setState({\n          question: quizQuestions[0].question,\n          answerOptions: shuffledAnswerOptions[0]\n        });\n      })[\"catch\"](function (err) {\n        console.log('Error getting document', err);\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer) {\n      this.setState(function (state) {\n        return {\n          answersCount: _objectSpread({}, state.answersCount, _defineProperty({}, answer, (state.answersCount[answer] || 0) + 1)),\n          answer: answer\n        };\n      });\n      console.log(answer);\n      console.log(this.state.answersCount);\n    }\n  }, {\n    key: \"setNextQestion\",\n    value: function setNextQestion() {\n      var counter = this.state.counter + 1;\n      var questionId = this.state.questionId + 1;\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n      });\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(result) {\n      if (result.length === 1) {\n        this.setState({\n          result: result[0]\n        });\n      } else {\n        this.setState({\n          result: 'Undetermined'\n        });\n      }\n    }\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      var answersCount = this.state.answersCount;\n\n      var answerCountKeys = _Object$keys(answersCount);\n\n      var answerCountValues = answerCountKeys.map(function (key) {\n        return answersCount[key];\n      });\n      var maxAnswerCount = Math.max.apply(null, answerCountValues);\n      return answerCountKeys.filter(function (key) {\n        return answersCount[key] === maxAnswerCount;\n      });\n    }\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(event) {\n      var _this3 = this;\n\n      this.setUserAnswer(event.currentTarget.value);\n\n      if (this.state.questionId < quizQuestions.length) {\n        setTimeout(function () {\n          return _this3.setNextQestion();\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this3.setResults(_this3.getResults());\n        }, 300);\n      }\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      return __jsx(Quiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return __jsx(Result, {\n        quizResult: this.state.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"App-Header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"React Quiz\")), this.state.result ? this.renderResult() : this.renderQuiz());\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Kristiyan/Desktop/React-Nextjs-QuizApp/pages/index.js"],"names":["Component","Quiz","Result","Login","firebase","quizQuestions","Index","props","state","counter","questionId","question","answerOptions","answer","answersCount","result","handleAnswerSelected","bind","getData","firestore","collection","get","then","snapshot","forEach","doc","push","data","shuffledAnswerOptions","map","shuffleArray","answers","setState","err","console","log","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","answerCountKeys","answerCountValues","key","maxAnswerCount","max","apply","filter","event","setUserAnswer","currentTarget","value","setTimeout","setNextQestion","setResults","getResults","renderResult","renderQuiz"],"mappings":"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","sourcesContent":["\r\nimport { Component } from \"react\";\r\nimport Quiz from '../components/quiz';\r\nimport Result from '../components/result';\r\nimport Login from '../components/login';\r\nimport firebase from '../components/firebase';\r\n\r\nlet quizQuestions = [];\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            counter: 0,\r\n            questionId: 1,\r\n            question: '',\r\n            answerOptions: [],\r\n            answer: '',\r\n            answersCount: {},\r\n            result: ''\r\n        };\r\n\r\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        let getData = firebase.firestore().collection('questions').get()\r\n        .then(snapshot => { \r\n            snapshot.forEach((doc) => {\r\n                quizQuestions.push(doc.data());\r\n            })\r\n            const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\r\n        \r\n            this.setState({\r\n                question: quizQuestions[0].question,\r\n                answerOptions: shuffledAnswerOptions[0]\r\n            })\r\n        })\r\n        .catch(err => {\r\n            console.log('Error getting document', err);\r\n        });\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    setUserAnswer(answer) {\r\n        this.setState((state) => ({\r\n            answersCount: {\r\n                ...state.answersCount,\r\n                [answer]:  (state.answersCount[answer] || 0) + 1 \r\n            },\r\n            answer: answer\r\n        }))\r\n        console.log(answer)\r\n        console.log(this.state.answersCount);\r\n    }\r\n\r\n    setNextQestion() {\r\n        const counter = this.state.counter + 1;\r\n        const questionId = this.state.questionId + 1;\r\n\r\n        this.setState({\r\n            counter: counter,\r\n            questionId: questionId,\r\n            question: quizQuestions[counter].question,\r\n            answerOptions: quizQuestions[counter].answers,\r\n            answer: ''\r\n        });\r\n    }\r\n\r\n    setResults(result) {\r\n        if (result.length === 1) {\r\n            this.setState({result: result[0]});\r\n        } else {\r\n            this.setState({result: 'Undetermined'});\r\n        }\r\n    }\r\n\r\n    getResults() {\r\n        const answersCount = this.state.answersCount;\r\n        const answerCountKeys = Object.keys(answersCount)\r\n        const answerCountValues = answerCountKeys.map((key) => answersCount[key]);\r\n\r\n        const maxAnswerCount = Math.max.apply(null, answerCountValues);\r\n\r\n        return answerCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\r\n    }\r\n\r\n    handleAnswerSelected(event) {\r\n        this.setUserAnswer(event.currentTarget.value);\r\n        if (this.state.questionId < quizQuestions.length) {\r\n            setTimeout(() => this.setNextQestion(), 300);\r\n        } else {\r\n            setTimeout(() => this.setResults(this.getResults()), 300)\r\n        }\r\n    }\r\n\r\n    renderQuiz() {\r\n        return (\r\n            <Quiz\r\n                answer={this.state.answer}\r\n                answerOptions={this.state.answerOptions}\r\n                questionId={this.state.questionId}\r\n                question={this.state.question}\r\n                questionTotal={quizQuestions.length}\r\n                onAnswerSelected={this.handleAnswerSelected}\r\n            />\r\n        )\r\n    }\r\n\r\n    renderResult() {\r\n        return(\r\n            <Result quizResult={this.state.result}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n       return( \r\n            <div className=\"App\">\r\n                <div className=\"App-Header\">\r\n                    <h2>React Quiz</h2>\r\n                </div>\r\n               { this.state.result ? this.renderResult() : this.renderQuiz()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}