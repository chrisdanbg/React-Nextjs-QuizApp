{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\applynx2\\\\Desktop\\\\react-app\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport quizQuestions from '../api/quizQuestions';\nimport Question from \"../components/question\";\nimport { Component } from \"react\";\nimport Quiz from '../components/quiz';\n\nvar Index = /*#__PURE__*/function (_Component) {\n  _inherits(Index, _Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var shuffledAnswerOptions = quizQuestions.map(function (question) {\n        return _this2.shuffleArray(question.answers);\n      });\n      this.setState({\n        question: quizQuestions[0].question,\n        answerOptions: shuffledAnswerOptions[0]\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"App-Header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"React Quiz\")), __jsx(Quiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/applynx2/Desktop/react-app/pages/index.js"],"names":["quizQuestions","Question","Component","Quiz","Index","props","state","counter","questionId","question","answerOptions","answer","answersCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random"],"mappings":";;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,sBAA1B;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;IAEMC,K;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,CADA;AAETC,MAAAA,UAAU,EAAE,CAFH;AAGTC,MAAAA,QAAQ,EAAE,EAHD;AAITC,MAAAA,aAAa,EAAE,EAJN;AAKTC,MAAAA,MAAM,EAAE,EALC;AAMTC,MAAAA,YAAY,EAAE,EANL;AAOTC,MAAAA,MAAM,EAAE;AAPC,KAAb;AAUA,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BC,IAA1B,+BAA5B;AAbe;AAclB;;;;wCAEmB;AAAA;;AAChB,UAAMC,qBAAqB,GAAGhB,aAAa,CAACiB,GAAd,CAAkB,UAACR,QAAD;AAAA,eAAc,MAAI,CAACS,YAAL,CAAkBT,QAAQ,CAACU,OAA3B,CAAd;AAAA,OAAlB,CAA9B;AAEA,WAAKC,QAAL,CAAc;AACVX,QAAAA,QAAQ,EAAET,aAAa,CAAC,CAAD,CAAb,CAAiBS,QADjB;AAEVC,QAAAA,aAAa,EAAEM,qBAAqB,CAAC,CAAD;AAF1B,OAAd;AAIH;;;iCAEYK,K,EAAO;AAChB,UAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,UAAiCC,cAAjC;AAAA,UAAiDC,WAAjD,CADgB,CAGhB;;AACA,aAAO,MAAMH,YAAb,EAA2B;AAEvB;AACAG,QAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,QAAAA,YAAY,IAAI,CAAhB,CAJuB,CAMvB;;AACAE,QAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,QAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,QAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACH;;AAED,aAAOH,KAAP;AACH;;;6BAEQ;AACN,aACK;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,EAII,MAAC,IAAD;AACI,QAAA,MAAM,EAAE,KAAKf,KAAL,CAAWK,MADvB;AAEI,QAAA,aAAa,EAAE,KAAKL,KAAL,CAAWI,aAF9B;AAGI,QAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWE,UAH3B;AAII,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QAJzB;AAKI,QAAA,aAAa,EAAET,aAAa,CAACuB,MALjC;AAMI,QAAA,gBAAgB,EAAE,KAAKT,oBAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADL;AAeF;;;;EA7DeZ,S;;AAgEpB,eAAeE,KAAf","sourcesContent":["import quizQuestions from '../api/quizQuestions'\r\n\r\nimport Question from \"../components/question\";\r\nimport { Component } from \"react\";\r\nimport Quiz from '../components/quiz';\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            counter: 0,\r\n            questionId: 1,\r\n            question: '',\r\n            answerOptions: [],\r\n            answer: '',\r\n            answersCount: {},\r\n            result: ''\r\n        };\r\n\r\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\r\n        \r\n        this.setState({\r\n            question: quizQuestions[0].question,\r\n            answerOptions: shuffledAnswerOptions[0]\r\n        })\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    render() {\r\n       return( \r\n            <div className=\"App\">\r\n                <div className=\"App-Header\">\r\n                    <h2>React Quiz</h2>\r\n                </div>\r\n                <Quiz\r\n                    answer={this.state.answer}\r\n                    answerOptions={this.state.answerOptions} \r\n                    questionId={this.state.questionId}\r\n                    question={this.state.question}\r\n                    questionTotal={quizQuestions.length}\r\n                    onAnswerSelected={this.handleAnswerSelected}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}