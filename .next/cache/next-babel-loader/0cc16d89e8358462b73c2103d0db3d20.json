{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kristiyan\\\\Desktop\\\\React-Nextjs-QuizApp\\\\components\\\\auth.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from '../components/firebase';\nimport fb from 'firebase';\nimport { Component } from 'react';\nimport Link from 'next/link'; // Configure FirebaseUI.\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: '/signedIn',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [fb.auth.EmailAuthProvider.PROVIDER_ID],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false\n  }\n};\n\nclass Auth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSignedIn: false // Local signed-in state.\n\n    };\n  } // Listen to the Firebase Auth state and set the local state.\n\n\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => this.setState({\n      isSignedIn: !!user\n    }));\n  } // Make sure we un-register Firebase observers when the component unmounts.\n\n\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    if (!this.state.isSignedIn) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"My App\"), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Please sign-in:\"), __jsx(StyledFirebaseAuth, {\n        uiConfig: uiConfig,\n        firebaseAuth: firebase.auth(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"My App\"), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Welcome \", firebase.auth().currentUser.email, \"! You are now signed-in!\"), __jsx(Link, {\n      href: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Home\")), this.props.children, __jsx(\"a\", {\n      onClick: () => firebase.auth().signOut(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Sign-out\"));\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["C:/Users/Kristiyan/Desktop/React-Nextjs-QuizApp/components/auth.js"],"names":["StyledFirebaseAuth","firebase","fb","Component","Link","uiConfig","signInSuccessUrl","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","Auth","constructor","props","state","isSignedIn","componentDidMount","unregisterAuthObserver","onAuthStateChanged","user","setState","componentWillUnmount","render","currentUser","email","children","signOut"],"mappings":";;;AAAA,OAAOA,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,EAAP,MAAe,UAAf;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG;AACb;AACA;AACAC,EAAAA,gBAAgB,EAAE,WAHL;AAIb;AACAC,EAAAA,aAAa,EAAE,CACbL,EAAE,CAACM,IAAH,CAAQC,iBAAR,CAA0BC,WADb,CALF;AAQbC,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,2BAA2B,EAAE,MAAM;AAF1B;AARE,CAAjB;;AAcA,MAAMC,IAAN,SAAmBV,SAAnB,CAA6B;AAE3BW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAc;AACZC,MAAAA,UAAU,EAAE,KADA,CACM;;AADN,KAAd;AAGD,GAP0B,CASzB;;;AACFC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,sBAAL,GAA8BlB,QAAQ,CAACO,IAAT,GAAgBY,kBAAhB,CAC3BC,IAAD,IAAU,KAAKC,QAAL,CAAc;AAACL,MAAAA,UAAU,EAAE,CAAC,CAACI;AAAf,KAAd,CADkB,CAA9B;AAGD,GAd0B,CAgBzB;;;AACFE,EAAAA,oBAAoB,GAAG;AACrB,SAAKJ,sBAAL;AACD;;AACDK,EAAAA,MAAM,GAAG;AAEP,QAAI,CAAC,KAAKR,KAAL,CAAWC,UAAhB,EAA4B;AAC1B,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE,MAAC,kBAAD;AAAoB,QAAA,QAAQ,EAAEZ,QAA9B;AAAyC,QAAA,YAAY,EAAEJ,QAAQ,CAACO,IAAT,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAYP,QAAQ,CAACO,IAAT,GAAgBiB,WAAhB,CAA4BC,KAAxC,6BAFF,EAGE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAHF,EAMG,KAAKX,KAAL,CAAWY,QANd,EAOE;AAAG,MAAA,OAAO,EAAE,MAAM1B,QAAQ,CAACO,IAAT,GAAgBoB,OAAhB,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,CADF;AAWD;;AA1C0B;;AA6C7B,eAAef,IAAf","sourcesContent":["import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport firebase from '../components/firebase';\r\nimport fb from 'firebase'\r\nimport { Component } from 'react';\r\nimport Link from 'next/link';\r\n\r\n// Configure FirebaseUI.\r\nconst uiConfig = {\r\n    // Popup signin flow rather than redirect flow.\r\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n    signInSuccessUrl: '/signedIn',\r\n    // We will display Google and Facebook as auth providers.\r\n    signInOptions: [\r\n      fb.auth.EmailAuthProvider.PROVIDER_ID\r\n    ],\r\n    callbacks: {\r\n      // Avoid redirects after sign-in.\r\n      signInSuccessWithAuthResult: () => false\r\n    }\r\n  };\r\n\r\nclass Auth extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state =  {\r\n      isSignedIn: false // Local signed-in state.\r\n    };\r\n  }\r\n\r\n    // Listen to the Firebase Auth state and set the local state.\r\n  componentDidMount() {\r\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\r\n      (user) => this.setState({isSignedIn: !!user})\r\n    );\r\n  }\r\n    \r\n    // Make sure we un-register Firebase observers when the component unmounts.\r\n  componentWillUnmount() {\r\n    this.unregisterAuthObserver();\r\n  }\r\n  render() {\r\n\r\n    if (!this.state.isSignedIn) {\r\n      return (\r\n        <div>\r\n          <h1>My App</h1>\r\n          <p>Please sign-in:</p>\r\n          <StyledFirebaseAuth uiConfig={uiConfig}  firebaseAuth={firebase.auth()}/>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>My App</h1>\r\n        <p>Welcome {firebase.auth().currentUser.email}! You are now signed-in!</p>\r\n        <Link href=\"/\">\r\n          <a>Home</a>\r\n        </Link>\r\n        {this.props.children}\r\n        <a onClick={() => firebase.auth().signOut()}>Sign-out</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auth"]},"metadata":{},"sourceType":"module"}