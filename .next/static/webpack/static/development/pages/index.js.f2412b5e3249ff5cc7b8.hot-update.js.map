{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.f2412b5e3249ff5cc7b8.hot-update.js","sources":["webpack:///./components/answerOption.js","webpack:///./components/questionCount.js","webpack:///./components/quiz.js","webpack:///./pages/index.js"],"sourcesContent":["import PropTypes from 'prop-types'\r\n\r\n\r\nfunction AnswerOption(props) {\r\n    return (\r\n        <li className=\"answerOption\">\r\n            <input\r\n                type=\"radio\"\r\n                className=\"radioCustomBUtton\"\r\n                name = \"radioGroup\"\r\n                checked = {props.answerType === props.answer}\r\n                id = {props.answerType}\r\n                value = {props.answerType}\r\n                disabled = {props.answer}\r\n                onChange = {props.onAnswerSelected}\r\n            />\r\n            <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n                {props.answerContent}\r\n            </label>\r\n        </li>\r\n    );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n    answerType: PropTypes.string.isRequired,\r\n    answerContent: PropTypes.string.isRequired,\r\n    answer: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AnswerOption;","import PropTypes from 'prop-types';\r\n\r\nfunction QuestionCount(props) {\r\n    return (\r\n        <div className=\"questionCount\">\r\n            Question <span>{props.counter}</span> of <span>{props.total}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nQuestionCount.propTypes = {\r\n    counter: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired\r\n};\r\n\r\nexport default QuestionCount;","import PropTypes from 'prop-types';\r\nimport QuestionCount from './questionCount';\r\nimport Question from './question';\r\nimport AnswerOption from './answerOption';\r\n\r\nfunction Quiz(props) {\r\n    function renderAnswerOptions(key) {\r\n        return(\r\n            <AnswerOption\r\n                key={key.content}\r\n                answerContent={key.content}\r\n                answerType={key.type}\r\n                answer={props.answer}\r\n                questionId={props.questionId}\r\n                onAnswerSelected={props.onAnswerSelected}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"quiz\">\r\n            <QuestionCount\r\n                counter={props.questionId}\r\n                total={props.questionTotal}\r\n            />\r\n            <Question content={props.question}/>\r\n            <ul className=\"answerOptions\">\r\n                {props.answerOptions.map(renderAnswerOptions)}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nQuiz.propTypes = {\r\n    answer: PropTypes.string.isRequired,\r\n    answerOptions: PropTypes.array.isRequired,\r\n    counter: PropTypes.number.isRequired,\r\n    question: PropTypes.string.isRequired,\r\n    questionId: PropTypes.number.isRequired,\r\n    questionTotal: PropTypes.number.isRequired,\r\n    onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Quiz;","import quizQuestions from '../api/quizQuestions'\r\n\r\nimport Question from \"../components/question\";\r\nimport { Component } from \"react\";\r\nimport Quiz from '../components/quiz';\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            counter: 0,\r\n            questionId: 1,\r\n            question: '',\r\n            answerOptions: [],\r\n            answer: '',\r\n            answersCount: {},\r\n            result: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\r\n        \r\n        this.setState({\r\n            question: quizQuestions[0].question,\r\n            answerOptions: shuffledAnswerOptions[0]\r\n        })\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    render() {\r\n       return( \r\n            <div className=\"App\">\r\n                <div className=\"App-Header\">\r\n                    <h2>React Quiz</h2>\r\n                </div>\r\n                <Quiz\r\n                    answer={this.state.answer}\r\n                    answerOptions={this.state.answerOptions} \r\n                    questionId={this.state.questionId}\r\n                    question={this.state.question}\r\n                    questionTotal={quizQuestions.length}\r\n                    onAnswerSelected={this.handleAnswerSelected}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAYA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;AA3DA;AACA;AA6DA;;;;A","sourceRoot":""}